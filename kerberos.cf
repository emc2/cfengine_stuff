# Bundles to manage a relatively simple kerberos realm.  This is for
# realms that have only a single kdc and kadmin server, no cross-realm
# CAs, and no app-specific default options.
#
# This stretches the limit of what cfengine file editing functions can
# do; more complex setups should probably just publish config files
# directly.

# Kerberos configuration data
bundle agent kerberos_config
{
  vars:
      "realm" string => "METRICSPACE.NET";
      "kdc_server" string => "kdc.metricspace.net:88";
      "kadmin_server" string => "kdc.metricspace.net:749";
      "realm_domain" string => "metricspace.net";
      "host_cred" string => "host/$(sys.fqhost)";

    freebsd::
      "keytabs_dir" string => "/etc/keytabs";
      "system_keytab" string => "/etc/krb5.keytab";
}

# Set up the basic kerberos realm configuration.  This assumes we're
# using the base heimdal installation.
bundle agent kerberos_client
{
  vars:
    freebsd::
      "make_conf[KRB5_IMPL]" string => "heimdal";
      "make_conf[KRB5_HOME]" string => "/usr";

      "krb5_conf_file" string => "/etc/krb5.conf";

  files:
      # Make sure the keytabs directory exists
      "$(kerberos_config.keytabs_dir)/."
      create => "true",
      perms => m("644"),
      comment => "Create keytabs directory",
      classes => if_repaired("create_keytabs_dir");

      # Check if the keytab exists, and if it has the wrong
      # permissions, set them and flag for a warning.
      #
      # CFEngine cannot directly fix this problem, as doing so
      # requires someone to input the kerberos password for the
      # admin/admin principal.
      "$(kerberos_config.system_keytab)"
      create => "false",
      perms => mog ("600", "root", "wheel"),
      comment => "Assert that the system keytab is present and has the correct permissions",
      classes => if_repaired("keytab_wrong_perms");

      # Ensure that there is a krb5.conf file
      "$(krb5_conf_file)"
      create => "true",
      perms => mog ("644", "root", "wheel"),
      edit_template => "$(sys.workdir)/inputs/promises/krb5.conf.template",
      comment => "Create krb5.conf",
      classes => if_repaired("create_krb5_conf"),
      handle => "create_krb5_conf";

    freebsd::
      # Ensure that make.conf sets KRB5_IMPL and KRB5_HOME correctly
      # (ie. to heimdal and /usr)
      "/etc/make.conf"
      create => "true",
      perms => mog("644", "root", "wheel"),
      edit_line => set_variable_values("kerberos_realm.make_conf"),
      comment => "Set kerberos implementation to base system heimdal in make.conf",
      classes => if_repaired("edited_make_conf");

      # Make sure WITHOUT_KERBEROS is NOT set in src.conf
      "/etc/src.conf"
      create => "false",
      perms => mog("644", "root", "wheel"),
      edit_line => delete_lines_matching("[ \t]*WITHOUT_KERBEROS[ \t]*=[ \t]*1.*"),
      comment => "Removed line disabling kerberos from /etc/src.conf",
      classes => if_repaired("enable_kerberos_src_conf");

  reports:
    edited_make_conf::
      "Set kerberos implementation to base system heimdal in make.conf";

    enable_kerberos_src_conf::
      "Removed line disabling kerberos from /etc/src.conf";

    keytab_wrong_perms::
      "WARNING: System keytab had wrong permissions!  Possible security breach!  Consider re-creating the system keytab to secure systems.";

    create_keytab::
      "The system keytab does not exist.  It needs to be created manually.";

    create_krb5_conf::
      "Set configuration variables in /etc/krb5.conf";

    create_keytabs_dir::
      "Created keytabs directory";
}
