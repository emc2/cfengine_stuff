# Bundles to manage a relatively simple kerberos realm.  This is for
# realms that have only a single kdc and kadmin server, no cross-realm
# CAs, and no app-specific default options.
#
# This stretches the limit of what cfengine file editing functions can
# do; more complex setups should probably just publish config files
# directly.

# Kerberos configuration data
bundle agent kerberos_config
{
  vars:
      "realm" string => "METRICSPACE.NET";
      "kdc_server" string => "kdc.$(host_config.domain):88";
      "kadmin_server" string => "kdc.$(host_config.domain):749";
      "realm_domain" string => "$(host_config.domain)";
      "host_cred" string => "host/$(sys.fqhost)";

    freebsd::
      "keytabs_dir" string => "/etc/keytabs";
      "system_keytab" string => "/etc/krb5.keytab";
      "kdc_config_dir" string => "/usr/local/var/krb5kdc";

    darwin::
      "keytabs_dir" string => "/etc/keytabs";
}

# Set up the basic kerberos realm configuration.  This assumes we're
# using the base heimdal installation.
bundle agent kerberos_client
{
  vars:
    freebsd::
      # Variables for make.conf
      "make_conf[KRB5_IMPL]" string => "heimdal";
      "make_conf[KRB5_HOME]" string => "/usr";

      "krb5_conf_file" string => "/etc/krb5.conf";

    darwin::
      "krb5_conf_file" string => "/Library/Preferences/edu.mit.Kerberos";

  files:
      # Make sure the keytabs directory exists
      "$(kerberos_config.keytabs_dir)/."
      create => "true",
      perms => m("644"),
      comment => "Create keytabs directory",
      classes => if_repaired("create_keytabs_dir");

      # Check if the keytab exists, and if it has the wrong
      # permissions, set them and flag for a warning.
      #
      # CFEngine cannot directly fix this problem, as doing so
      # requires someone to input the kerberos password for the
      # admin/admin principal.
      "$(kerberos_config.system_keytab)"
      create => "false",
      perms => mog ("600", "root", "wheel"),
      comment => "Assert that the system keytab is present and has the correct permissions",
      classes => if_repaired("keytab_wrong_perms");

      # Set variables in krb5.conf
      "$(krb5_conf_file)"
      create => "true",
      edit_template => "$(sys.workdir)/inputs/promises/krb5.conf.template",
      comment => "Create krb5.conf",
      classes => if_repaired("create_krb5_conf");

      # Set permissions of krb5.conf
      "$(krb5_conf_file)"
      create => "false",
      perms => mog ("644", "root", "wheel"),
      comment => "Set krb5.conf permissions",
      classes => if_repaired("krb5_conf_set_perms");

    freebsd::
      # Ensure that make.conf sets KRB5_IMPL and KRB5_HOME correctly
      # (ie. to heimdal and /usr)
      "/etc/make.conf"
      create => "true",
      perms => mog("644", "root", "wheel"),
      edit_line => set_variable_values("kerberos_realm.make_conf"),
      comment => "Set kerberos implementation to base system heimdal in make.conf",
      classes => if_repaired("edited_make_conf");

      # Make sure WITHOUT_KERBEROS is NOT set in src.conf
      "/etc/src.conf"
      create => "false",
      perms => mog("644", "root", "wheel"),
      edit_line => delete_lines_matching("[ \t]*WITHOUT_KERBEROS[ \t]*=[ \t]*1.*"),
      comment => "Removed line disabling kerberos from /etc/src.conf",
      classes => if_repaired("enable_kerberos_src_conf");

  reports:
    edited_make_conf::
      "Set kerberos implementation to base system heimdal in make.conf";

    enable_kerberos_src_conf::
      "Removed line disabling kerberos from /etc/src.conf";

    keytab_wrong_perms::
      "WARNING: System keytab had wrong permissions!  Possible security breach!  Consider re-creating the system keytab to secure systems.";

    create_keytab::
      "The system keytab does not exist.  It needs to be created manually.";

    create_krb5_conf::
      "Set configuration variables in $(krb5_conf_file)";

    krb5_conf_set_perms::
      "Set permissions of $(krb5_conf_file)";

    create_keytabs_dir::
      "Created keytabs directory";
}

# Set up the basic kerberos server configuration. Note: this will not
# initialize the kerberos principals database, or create kstash.
# Neither will it create any principals.  That should be done
# manually!
bundle agent kerberos_server
{
  vars:
      "kadm_acl_file" string => "kadm5.acl";
      "kadm_acl_path" string => "$(kerberos_config.kdc_config_dir)/$(kadm_acl_file)";
      "kdc_conf_file" string => "kdc.conf";
      "kdc_conf_path" string => "$(kerberos_config.kdc_config_dir)/$(kdc_conf_file)";
      "principal_file" string => "principal";
      "principal_path" string => "$(kerberos_config.kdc_config_dir)/$(principal_file)";
      "principal_kadm5_file" string => "principal.kadm5";
      "principal_kadm5_path" string => "$(kerberos_config.kdc_config_dir)/$(principal_kadm5_file)";

    freebsd::
      # Variables for rc.conf, to enable the kerberos and kadmin
      # server.
      "rc_conf[kerberos5_server_enable]" string => "YES";
      "rc_conf[kadmind5_server_enable]" string => "YES";

      "startcommand[kerberos]" string => "/etc/rc.d/kerberos";
      "startcommand[kadmind]" string => "/etc/rc.d/kadmind";

  files:
      # Make sure the kerberos acl grants admins access to everything
      "$(kadm_acl_path)"
      create => "true",
      edit_line => append_if_no_line("*/admin@$(kerberos_config.realm) *"),
      comment => "Grant universal access to admins",
      classes => if_repaired("grant_admin_access");

      # Make sure the kerberos acl grants admins access to everything
      "$(kadm_acl_path)"
      create => "false",
      perms => mog("644", "root", "wheel"),
      comment => "Grant universal access to admins",
      classes => if_repaired("kadm_acl_perms");

      # Set config variables in the kdc.conf file
      "$(kdc_conf_path)"
      create => "true",
      edit_template => "$(sys.workdir)/inputs/promises/kdc.conf.template",
      comment => "Grant universal access to admins",
      classes => if_repaired("kdc_conf_edit");

      # Set permissions of kdc.conf file
      "$(kdc_conf_path)"
      create => "false",
      perms => mog("644", "root", "wheel"),
      comment => "Grant universal access to admins",
      classes => if_repaired("kdc_conf_edit");

      # Make sure the principal database exists and is only
      # accessible to root
      "$(principal_path)"
      create => "false",
      perms => mog("600", "root", "wheel"),
      comment => "Set permission of princial database to 600",
      classes => if_repaired("set_principal_perms");

      # Make sure the principal.kadm5 database exists and is only
      # accessible to root
      "$(principal_kadm5_path)"
      create => "false",
      perms => mog("600", "root", "wheel"),
      comment => "Set permission of princial.kadm5 database to 600",
      classes => if_repaired("set_principal_kadm5_perms");

    freebsd::
      # Make sure the kerberos server is turned on
      "/etc/rc.conf"
      create => "true",
      perms => mog("644", "root", "wheel"),
      edit_line => set_variable_values("kerberos_server.rc_conf"),
      comment => "Enable kerberos and kadmind in rc.conf",
      classes => if_repaired("enable_kerberos_rc_conf");

  services:
      # Start the kerberos service
      "kerberos"
      service_policy => "start",
      service_method => nonstandard_service;

      # Start the kadmin service
      "kadmin"
      service_policy => "start",
      service_method => nonstandard_service;

      # Reload the kdc config files if they were updated
    kdc_conf_edit::
      "kerberos"
      service_policy => "reload",
      service_method => nonstandard_service;

      # Reload the kdc config files if they were updated
    grant_admin_access::
      "kadmin"
      service_policy => "reload",
      service_method => nonstandard_service;

  reports:
    kdc_conf_edit::
      "Edit configuration variables in $(kdc_conf_path)";

    kdc_conf_perms::
      "Set permissions of $(kdc_conf_path) to 644";

    kadm_acl_perms::
      "Set permissions of $(kadm_acl_path) to 644";

    enable_kerberos_rc_conf::
      "Enable kerberos and kadmind in /etc/rc.conf";

    grant_admin_access::
      "Granted all privileges to admin";

    set_principal_perms::
      "WARNING: principal database was tampered with, possible security breach!!";
      "Set permission of princial database to 600.";

    set_principal_kadm5_perms::
      "WARNING: principal.kadm5 database was tampered with, possible security breach!!";
      "Set permission of princial database to 600.";
}
