# Configuration data for the LDAP system.
bundle agent ldap_config
{
  vars:
      # Base for the LDAP database.
      "ldap_base" string => "dc=metricspace,dc=net";
      # FQDN of the LDAP server.
      "ldap_server" string => "ldap.metricspace.net";
      # URI for LDAP server
      "ldap_server_uri" string => "ldaps://$(ldap_config.ldap_server)";

    freebsd::
      "ldap_conf_dir" string => "/usr/local/etc/openldap";
}

# Set up an LDAP client with GSSAPI authentication.  This only sets up
# the ldap.conf file, which controls LDAP tools like ldapsearch,
# ldapwhoami, ldapadd/modify, and friends.  Most applications using
# LDAP will have their own configuration variables.
#
# This sets up client certificates and GSSAPI authentication by
# default for the LDAP tools.
#
# Note: this bundle assumes kerberos_client, as well as ca_cert.
bundle agent ldap_client
{
  vars:
      # LDAP certificate file
      "ldap_cert_file" string => "$(sys.uqhost)-ldap-cert.pem";
      # LDAP key file
      "ldap_key_file" string => "$(sys.uqhost)-ldap-key.pem";
      # Path to LDAP certificate file
      "ldap_cert_path" string => "$(base_config.cert_files_path)/$(ldap_cert_file)";
      # Path to LDAP key file
      "ldap_key_path" string => "$(base_config.key_files_path)/$(ldap_key_file)";
      # name of ldap.conf
      "ldap_conf_file" string => "ldap.conf";
      # location of ldap.conf
      "ldap_conf_path" string => "$(ldap_config.ldap_conf_dir)/$(ldap_conf_file)";

  files:
      # Ensure the LDAP configuration directory exists.
      "$(ldap_config.ldap_conf_dir)/."
      create => "true",
      perms => m("644"),
      comment => "Create ldap configuration directory",
      classes => if_repaired("create_ldap_conf_dir");

      # Create and/or edit the ldap.conf file
      "$(ldap_conf_path)"
      create => "true",
      perms => m("644"),
      edit_template => "$(sys.workdir)/inputs/promises/ldap.conf.template",
      comment => "Create ldap.conf file",
      classes => if_repaired("set_ldap_conf");

      # Copy this host's LDAP certificate file from the policy host
      "$(ldap_cert_path)"
      create => "true",
      perms => m("644"),
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/$(ldap_cert_file)",
                             "$(sys.policy_hub)"),
      comment => "Copy host LDAP certificate file",
      classes => if_repaired("ldap_cert");

      # Copy this host's LDAP key file from the policy host
      "$(ldap_key_path)"
      create => "true",
      perms => mog("640", "root", "nslcd"),
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/$(ldap_key_file)",
                             "$(sys.policy_hub)"),
      comment => "Copy host LDAP key file",
      classes => if_repaired("ldap_key");

  reports:
    create_ldap_conf_dir::
      "Created LDAP configuration directory";

    set_ldap_conf::
      "Set LDAP client configuration variables";

    ldap_cert::
      "Copied LDAP SSL certificate file into place";

    ldap_key::
      "Copied LDAP SSL key file into place";
}


bundle agent ldap_server
{
  vars:
      "ldap_schema_dir" string => "$(ldap_config.ldap_conf_dir)/schema";

      "slapd_conf_file" string => "slapd.conf";
      "slapd_conf_path" string => "$(ldap_config.ldap_conf_dir)/$(slapd_conf_file)";

      "slapd_access_file" string => "slapd.access";
      "slapd_access_path" string => "$(ldap_config.ldap_conf_dir)/$(slapd_access_file)";

    freebsd::
      "ldap_module_dir" string => "/usr/local/libexec/openldap";
      "ldap_run_dir" string => "/var/run/openldap";
      "ldap_db_dir" string => "/var/db/openldap-data";

}
