# Configuration data for the LDAP system.
bundle agent ldap_config
{
  vars:
      # Base for the LDAP database.
      "ldap_base" string => "dc=metricspace,dc=net";
      # FQDN of the LDAP server.
      "ldap_server" string => "ldap.$(host_config.domain)";
      # URI for LDAP server
      "ldap_server_uri" string => "ldaps://$(ldap_config.ldap_server)";

    freebsd::
      "ldap_conf_dir" string => "/usr/local/etc/openldap";

    freebsd::
      "ldap_conf_dir" string => "/etc/openldap";
}

# Set up an LDAP client with GSSAPI authentication.  This only sets up
# the ldap.conf file, which controls LDAP tools like ldapsearch,
# ldapwhoami, ldapadd/modify, and friends.  Most applications using
# LDAP will have their own configuration variables.
#
# This sets up client certificates and GSSAPI authentication by
# default for the LDAP tools.
#
# Note: this bundle assumes kerberos_client, as well as ca_cert.
bundle agent ldap_client
{
  vars:
      # LDAP certificate file
      "ldap_cert_file" string => "$(sys.uqhost)-ldap-cert.pem";
      # LDAP key file
      "ldap_key_file" string => "$(sys.uqhost)-ldap-key.pem";
      # Path to LDAP certificate file
      "ldap_cert_path" string => "$(base_config.cert_files_path)/$(ldap_cert_file)";
      # Path to LDAP key file
      "ldap_key_path" string => "$(base_config.key_files_path)/$(ldap_key_file)";
      # name of ldap.conf
      "ldap_conf_file" string => "ldap.conf";
      # location of ldap.conf
      "ldap_conf_path" string => "$(ldap_config.ldap_conf_dir)/$(ldap_conf_file)";

  files:
      # Ensure the LDAP configuration directory exists.
      "$(ldap_config.ldap_conf_dir)/."
      create => "true",
      perms => m("644"),
      comment => "Create ldap configuration directory",
      classes => if_repaired("create_ldap_conf_dir");

      # Create and/or edit the ldap.conf file
      "$(ldap_conf_path)"
      create => "true",
      perms => m("644"),
      edit_template => "$(sys.workdir)/inputs/promises/ldap.conf.template",
      comment => "Create ldap.conf file",
      classes => if_repaired("set_ldap_conf");

      # Copy this host's LDAP certificate file from the policy host
      "$(ldap_cert_path)"
      create => "true",
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/$(ldap_cert_file)",
                             "$(sys.policy_hub)"),
      comment => "Copy host LDAP certificate file",
      classes => if_repaired("ldap_cert");

      # Set permissions on LDAP certificate file
      "$(ldap_cert_path)"
      create => "false",
      perms => m("644"),
      comment => "Set LDAP certificate file permissions",
      classes => if_repaired("ldap_cert_perms");

      # Copy this host's LDAP key file from the policy host
      "$(ldap_key_path)"
      create => "true",
      perms => m("600"),
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/$(ldap_key_file)",
                             "$(sys.policy_hub)"),
      comment => "Copy host LDAP key file",
      classes => if_repaired("ldap_key");

      # Copy this host's LDAP key file from the policy host
      "$(ldap_key_path)"
      create => "false",
      perms => m("600"),
      comment => "Set LDAP key file permissions",
      classes => if_repaired("ldap_key_perms");

  reports:
    create_ldap_conf_dir::
      "Created LDAP configuration directory";

    set_ldap_conf::
      "Set LDAP client configuration variables";

    ldap_cert::
      "Copied LDAP SSL certificate file into place";

    ldap_cert_perms::
      "Set permissions of $(ldap_cert_path) to 644";

    ldap_key::
      "Copied LDAP SSL key file into place";

    ldap_key_perms::
      "Set permissions of $(ldap_key_path) to 644";
}

# Set up a slapd server, which permits GSSAPI logins, as well as PLAIN
# logins that are checked against the kerberos service (using
# saslauthd).
bundle agent ldap_server
{
  vars:
    freebsd::
      # Directory where slapd modules are contained
      "ldap_module_dir" string => "/usr/local/libexec/openldap";
      # Directory where slapd
      "ldap_run_dir" string => "/var/run/openldap";
      # Directory where slapd database data is contained
      "ldap_db_dir" string => "/var/db/openldap-data";
      # User under which slapd runs
      "slapd_user" string => "ldap";
      # Group under which slapd runs
      "slapd_group" string => "ldap";
      # Path to slapd sasl configuration file
      "sasl_config_path" string => "/usr/local/lib/sasl2/slapd.conf";
      # Path to directory holding mux for ldapi:// connections
      "sasl_auth_mux_dir" string => "/var/run/saslauthd";
      # Path to mux for ldapi:// connections
      "sasl_auth_mux_path" string => "$(sasl_auth_mux_dir)/mux";
      # SASL configuration variables to set
      "sasl_config_vars" slist => { "pwcheck_method: saslauthd",
                                    "saslauthd_path: $(sasl_auth_mux_path)" };

      # rc variables for enabling saslauthd and slapd
      "rc_conf[slapd_enable]" string => "YES";
      "rc_conf[slapd_flags]" string => "\"-h 'ldapi:/// ldap:/// ldaps:///'\"";
      "rc_conf[slapd_sockets]" string => "/var/run/openldap/ldapi";
      "rc_conf[slapd_krb5_ktname]" string => "/etc/keytabs/ldap.keytab";

      # The ldap user info
      "ldap_user[ldap][uid]" string => "389";
      "ldap_user[ldap][gid]" string => "ldap";
      "ldap_user[ldap][fullname]" string => "OpenLDAP server";
      "ldap_user[ldap][home]" string => "$(base_config.nonexistent_dir)";
      "ldap_user[ldap][shell]" string => "$(base_config.nologin_shell)";
      "ldap_user[ldap][flags]" string => "";

      # The ldap group info
      "ldap_group[ldap][gid]" string => "389";
      "ldap_group[ldap][flags]" string => "";


    any::
      # Directory for ldap schemas
      "slapd_schema_dir" string => "$(ldap_config.ldap_conf_dir)/schema";

      # Name of slapd.conf file
      "slapd_conf_file" string => "slapd.conf";
      # Path to slapd.conf file
      "slapd_conf_path" string => "$(ldap_config.ldap_conf_dir)/$(slapd_conf_file)";

      # Name of slapd access control file
      "slapd_access_file" string => "slapd.access";
      # Path to slapd access control file
      "slapd_access_path" string => "$(ldap_config.ldap_conf_dir)/$(slapd_access_file)";

      # slapd certificate file
      "slapd_cert_file" string => "$(sys.uqhost)-slapd-cert.pem";
      # slapd key file
      "slapd_key_file" string => "$(sys.uqhost)-slapd-key.pem";
      # Path to slapd certificate file
      "slapd_cert_path" string => "$(base_config.cert_files_path)/$(slapd_cert_file)";
      # Path to slapd file
      "slapd_key_path" string => "$(base_config.key_files_path)/$(slapd_key_file)";
      # NSS kerberos credential
      "slapd_cred" string => "ldap/$(sys.fqhost)";
      # slapd keytab file
      "slapd_keytab_file" string => "ldap.keytab";
      # Path to slapd keytab
      "slapd_keytab_path" string => "$(kerberos_config.keytabs_dir)/$(slapd_keytab_file)";

      "db_config_file" string => "DB_CONFIG";
      "db_config_path" string => "$(ldap_db_dir)/$(db_config_file)";

  files:
      # Ensure the LDAP configuration directory exists.
      "$(ldap_config.ldap_conf_dir)/."
      create => "true",
      perms => m("644"),
      comment => "Create ldap configuration directory",
      classes => if_repaired("create_ldap_conf_dir");

      # Copy slapd certificate file from the policy host
      "$(slapd_cert_path)"
      create => "true",
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/$(slapd_cert_file)",
                             "$(sys.policy_hub)"),
      comment => "Copy slapd certificate file",
      classes => if_repaired("slapd_cert");

      # Set permissions on slapd certificate file
      "$(slapd_cert_path)"
      create => "false",
      perms => mog("644", "$(slapd_user)", "$(slapd_group)"),
      comment => "Set slapd certificate file permissions",
      classes => if_repaired("slapd_cert_perms");

      # Copy slapd key file from the policy host
      "$(slapd_key_path)"
      create => "true",
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/$(slapd_key_file)",
                             "$(sys.policy_hub)"),
      comment => "Copy slapd key file",
      classes => if_repaired("slapd_key");

      # Copy slapd key file from the policy host
      "$(slapd_key_path)"
      create => "false",
      perms => mog("600", "$(slapd_user)", "$(slapd_group)"),
      comment => "Set slapd key file permissions",
      classes => if_repaired("slapd_key_perms");

      # Make sure the keytab has the right permissions
      "$(slapd_keytab_path)"
      create => "false",
      perms => mog("600", "$(slapd_user)", "$(slapd_group)"),
      comment => "Set permission of slapd keytab",
      classes => if_repaired("slapd_keytab_wrong_perms");

      # Create and/or edit the slapd.conf file
      "$(slapd_conf_path)"
      create => "true",
      edit_template => "$(sys.workdir)/inputs/promises/slapd.conf.template",
      comment => "Create slapd.conf file",
      classes => if_repaired("set_slapd_conf");

      # Create and/or edit the slapd.conf file
      "$(slapd_conf_path)"
      create => "false",
      perms => m("644"),
      comment => "Set slapd.conf file permissions",
      classes => if_repaired("slapd_conf_perms");

      # Create and/or edit the slapd.access file
      "$(slapd_access_path)"
      create => "true",
      edit_template => "$(sys.workdir)/inputs/promises/slapd.access.template",
      comment => "Create slapd.access file",
      classes => if_repaired("set_slapd_access");

      # Set slapd.access permissions
      "$(slapd_access_path)"
      create => "false",
      perms => m("644"),
      comment => "Set slapd.access file permissions",
      classes => if_repaired("slapd_access_perms");

      # Create DB_CONFIG file
      "$(db_config_path)"
      create => "true",
      edit_line => append_if_no_line("set_cachesize 0 67108864 0"),
      comment => "Create DB_CONFIG file in database directory",
      classes => if_repaired("edit_db_config");

      # Set DB_CONFIG permissions
      "$(db_config_path)"
      create => "false",
      perms => mog("644", "$(slapd_user)", "$(slapd_group)"),
      comment => "Set DB_CONFIG file permissions",
      classes => if_repaired("db_config_perms");

      # Setup sasl configuration file
      "$(sasl_config_path)"
      create => "true",
      edit_line => append_if_no_lines(@(sasl_config_vars)),
      comment => "Edit sasl configuration file",
      classes => if_repaired("edit_sasl_conf");

      # Set sasl configuration file permissions
      "$(sasl_config_path)"
      create => "false",
      perms => m("644"),
      comment => "Set sasl configuration file permissions",
      classes => if_repaired("sasl_conf_perms");

    freebsd::
      # Make sure the slapd daemon is turned on
      "/etc/rc.conf"
      create => "true",
      perms => mog("644", "root", "wheel"),
      edit_line => set_variable_values("ldap_server.rc_conf"),
      comment => "Enable slapd in rc.conf",
      classes => if_repaired("enable_slapd_rc_conf");

  methods:
      # Create ldap user
      "ldap_user" usebundle => create_local_users("ldap_server.ldap_user");

      # Create ldap group
      "ldap_group" usebundle => create_local_groups("ldap_server.ldap_group");

  services:
      # Start the sasl service
      "sasl"
      service_policy => "start",
      service_method => nonstandard_service;

      # Start the ldap service
      "ldap"
      service_policy => "start",
      service_method => nonstandard_service;

      # Reload the sasl files if they were updated
    edit_sasl_conf::
      "sasl"
      service_policy => "reload",
      service_method => nonstandard_service;

      # Reload the ldap config files if they were updated
    set_slapd_conf|set_slapd_access|edit_db_config::
      "ldap"
      service_policy => "reload",
      service_method => nonstandard_service;

      # Restart the ldap server if the keys change
    slapd_key|slapd_cert::
      "ldap"
      service_policy => "restart",
      service_method => nonstandard_service;

  reports:
    edit_sasl_conf::
      "Edit sasl configuration in $(sasl_config_path)";

    sasl_conf_perms::
      "Set $(sasl_config_path) permissions to 644";

    edit_db_config::
      "Edited $(db_config_path) file";

    db_config_perms::
      "Set $(db_config_path) permissions";

    create_ldap_conf_dir::
      "Created LDAP configuration directory";

    create_ldap_schema_dir::
      "Created LDAP schema directory";

    slapd_key::
      "Copied slapd SSL key";

    slapd_key_perms::
      "Set $(slapd_key_path) permissions to 600";

    slapd_cert::
      "Copied slapd SSL certificate";

    slapd_cert_perms::
      "Set $(slapd_cert_path) permissions to 644";

    slapd_keytab_wrong_perms::
      "Set permissions on $(slapd_keytab_path).  WARNING: Keytab had wrong permissions; possible data breach!";

    set_slapd_conf::
      "Set LDAP server configuration variables";

    slapd_conf_perms::
      "Set LDAP server configuration variables";

    set_slapd_access::
      "Set LDAP server access policy";

    slapd_access_perms::
      "Set $(slapd_access_path) permissions to 644";

    enable_slapd_rc_conf::
      "Enabled slapd in rc.conf";
}
