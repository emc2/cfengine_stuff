# Manage an nslcd configuration, which talks to an LDAP server over
# SSL with client certificates, using GSSAPI to authenticate.
#
# The nslcd daemon gets has a per-host service credential which it
# uses to authenticate to the LDAP server, as well as a per-host SSL
# certificate and key.
#
# What this bundle does NOT do is create the kerberos principals and
# set up the keytabs.  That requires direct password input.  It also
# does not create the SSL keys (though it does distribute them).
#
# You need to create a kerberos principal per-host of the form
# nss/<hostname>, and extract it to the keytab
# /etc/keytabs/nss.keytab.
#
# This bundle expects the kerberos_client bundle.
bundle agent nslcd
{
  vars:
      # NSS certificate file
      "nslcd_cert_file" string => "$(sys.uqhost)-nss-cert.pem";
      # NSS key file
      "nslcd_key_file" string => "$(sys.uqhost)-nss-key.pem";
      # Path to NSS certificate file
      "nslcd_cert_path" string => "$(base_config.cert_files_path)/$(nslcd_cert_file)";
      # Path to NSS key file
      "nslcd_key_path" string => "$(base_config.key_files_path)/$(nslcd_key_file)";
      # NSS kerberos credential
      "nslcd_cred" string => "nss/$(sys.fqhost)";
      # NSS keytab file
      "nslcd_keytab_file" string => "nss.keytab";
      # Path to NSS keytab
      "nslcd_keytab_path" string => "$(kerberos_config.keytabs_dir)/$(nslcd_keytab_file)";

      # A crontab entry to refresh the kerberos credentials every 8 hours
      "nslcd_crontab_entry" string => "0       */8     *       *       *       nslcd   /usr/bin/kinit -t $(nslcd_keytab_path) $(nslcd_cred)";

      # The nslcd user info
      "nslcd_user[nslcd][uid]" string => "928";
      "nslcd_user[nslcd][gid]" string => "nslcd";
      "nslcd_user[nslcd][fullname]" string => "nslcd daemon";
      "nslcd_user[nslcd][home]" string => "$(base_config.nonexistent_dir)";
      "nslcd_user[nslcd][shell]" string => "$(base_config.nologin_shell)";
      "nslcd_user[nslcd][flags]" string => "";

      # The nslcd group info
      "nslcd_group[nslcd][gid]" string => "928";
      "nslcd_group[nslcd][flags]" string => "";

    freebsd::
      # Path to the nslcd config file
      "nslcd_conf_path" string => "/usr/local/etc/nslcd.conf";
      # rc vars to set
      "rc_conf[nslcd_enable]" string => "YES";

  files:
      # Set basic configuration variables in nslcd.conf
      "$(nslcd_conf_path)"
      create => "true",
      perms => m("600"),
      edit_template => "$(sys.workdir)/inputs/promises/nslcd.conf.template",
      comment => "Set nslcd configuration vars",
      classes => if_repaired("edit_nslcd_conf");

      # Set up a crontab entry to refresh the kerberos credentials
      # every 8 hours (by default, they expire in 10 hours, so this is
      # ok).
      "$(base_config.system_crontab)"
      create => "false",
      edit_line => append_if_no_line("$(nslcd_crontab_entry)"),
      comment => "Set crontab entry to refresh nslcd credentials periodically",
      classes => if_repaired("set_nslcd_crontab");

      # Copy this host's NSS certificate file from the policy host
      "$(nslcd_cert_path)"
      create => "true",
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/$(nslcd_cert_file)",
                             "$(sys.policy_hub)"),
      comment => "Copy host NSS certificate file",
      classes => if_repaired("nss_cert");

      # Set permissions of the NSS certificate file
      "$(nslcd_cert_path)"
      create => "false",
      perms => mog("644", "nslcd", "nslcd"),
      comment => "Set NSS certificate file permissions",
      classes => if_repaired("nss_cert_perms");

      # Make sure the keytab has the right permissions
      "$(nslcd_keytab_path)"
      create => "false",
      perms => mog("600", "nslcd", "nslcd"),
      comment => "Set permission of NSS keytab",
      classes => if_repaired("nss_keytab_wrong_perms");

      # Copy this host's NSS key file from the policy host
      "$(nslcd_key_path)"
      create => "true",
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/$(nslcd_key_file)",
                             "$(sys.policy_hub)"),
      comment => "Copy host NSS key file",
      classes => if_repaired("nss_key");

      # Set permissions of the NSS key file
      "$(nslcd_key_path)"
      create => "false",
      perms => mog("600", "nslcd", "nslcd"),
      comment => "Set NSS key file permissions",
      classes => if_repaired("nss_key_perms");

    freebsd::
      # Make sure the nslcd daemon is turned on
      "/etc/rc.conf"
      create => "true",
      perms => mog("644", "root", "wheel"),
      edit_line => set_variable_values("nslcd.rc_conf"),
      comment => "Enable nslcd in rc.conf",
      classes => if_repaired("enable_nslcd_rc_conf");

  methods:
      # Create nslcd user
      "nslcd_user" usebundle => create_local_users("nslcd.nslcd_user");

      # Create nslcd group
      "nslcd_group" usebundle => create_local_groups("nslcd.nslcd_group");

  services:
      # Start the nslcd service
      "nslcd"
      service_policy => "start",
      service_method => nonstandard_service;

  reports:
    nss_key::
      "Copied NSS host SSL key";

    nss_cert::
      "Copied NSS host SSL certificate";

    nss_key_perms::
      "Set $(nslcd_key_path) permissions to 600";

    nss_cert_perms::
      "Set $(nslcd_cert_path) permissions to 644";

    edit_nslcd_conf::
      "Set configuration variables in $(nslcd_conf_path)";

    set_nslcd_crontab::
      "Set crontab entry to refresh nslcd credentials periodically";

    nss_keytab_wrong_perms::
      "Set permissions on $(nslcd_keytab_path).  WARNING: Keytab had wrong permissions; possible data breach!";

    enable_nslcd_rc_conf::
      "Enabled nslcd in rc.conf";
}
