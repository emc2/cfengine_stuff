bundle agent openfire
{
  vars:
    freebsd::
      # Master config directory
      "conf_dir" string => "/usr/local/etc/openfire";

      # Variables to get set in rc.conf
      "rc_conf[openfire_enable]" string => "YES";
      "openfire_javargs" string => "openfire_javargs=\"-Djava.security.auth.login.config=$(login_conf_path) -Djavax.net.ssl.trustStore=$(ca_cert.ca_keystore_path) -Djavax.net.ssl.trustStorePassword=$(ca_cert.ca_keystore_password) -Djava.awt.headless=true\"";

      # Openfire's postgresql JDBC driver
      "openfire_postgres_jar" string => "/usr/local/share/java/openfire/lib/postgres.jar";
      # The postgresql JDBC driver installed by FreeBSD ports
      "port_postgres_jar" string => "/usr/local/share/java/classes/postgresql.jar";

      # Java system-wide truststore
      "java_cacerts_path" string => "/usr/local/openjdk7/jre/lib/security/cacerts";

      # User and group
      "user" string => "openfire";
      "group" string => "openfire";

    any::
      # The keystore file
      "keystore_file" string => "keystore";
      "keystore_path" string => "$(conf_dir)/$(keystore_file)";

      # The truststore file
      "truststore_file" string => "truststore";
      "truststore_path" string => "$(conf_dir)/$(truststore_file)";

      # The client truststore file
      "client_truststore_file" string => "client.truststore";
      "client_truststore_path" string => "$(conf_dir)/$(client_truststore_file)";

      # The JAAS login.conf file
      "login_conf_file" string => "login.conf";
      "login_conf_path" string => "$(conf_dir)/$(login_conf_file)";

      # The openfire xml configuration file
      "openfire_config_file" string => "openfire.xml";
      "openfire_config_path" string => "$(conf_dir)/$(openfire_config_file)";

      # Openfire kerberos credential.  This is used both for
      # authentication with clients, as well as for authentication
      # with the LDAP database.
      "kerberos_cred" string => "xmpp/$(sys.fqhost)";
      # NSS keytab file
      "keytab_file" string => "xmpp.keytab";
      # Path to NSS keytab
      "keytab_path" string => "$(kerberos_config.keytabs_dir)/$(keytab_file)";

      # The client certificate used by openfire to talk to LDAP
      "internal_cert_file" string => "$(sys.uqhost)-openfire-ldap-cert.pem";
      "internal_cert_path" string => "$(base_config.cert_files_path)/$(internal_cert_file)";

      # The client key used by openfire to talk to LDAP
      "internal_key_file" string => "$(sys.uqhost)-openfire-ldap-key.pem";
      "internal_key_path" string => "$(base_config.key_files_path)/$(internal_key_file)";

      # The client certificate used by openfire to talk to clients
      "external_cert_file" string => "xmpp-cert.pem";
      "external_cert_path" string => "$(base_config.cert_files_path)/$(external_cert_file)";

      # The client key used by openfire to talk to clients
      "external_key_file" string => "xmpp-key.pem";
      "external_key_path" string => "$(base_config.key_files_path)/$(external_key_file)";

  files:
      # Create openfire configuration directory
      "$(conf_dir)/."
      create => "true",
      perms => m("755"),
      comment => "Create openfire configuration directory",
      classes => if_repaired("create_conf_dir");

      # Copy the openfire keystore
      "$(keystore_path)"
      perms => mog("600", "$(user)", "$(group)"),
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/openfire.keystore",
                             "$(sys.policy_hub)"),
      comment => "Copy openfire keystore file",
      classes => if_repaired("keystore");

      # Copy the openfire client truststore
      "$(truststore_path)"
      perms => mog("644", "$(user)", "$(group)"),
      copy_from => local_cp("$(java_cacerts_path)"),
      comment => "Copy openfire truststore file",
      classes => if_repaired("truststore");

      # Copy the openfire client truststore
      "$(client_truststore_path)"
      perms => mog("644", "$(user)", "$(group)"),
      copy_from => local_cp("$(ca_cert.ca_keystore_path)"),
      comment => "Copy openfire client truststore file",
      classes => if_repaired("client_truststore");

      # Copy the openfire-to-LDAP certificate file from the policy host
      "$(internal_cert_path)"
      perms => mog("644", "$(user)", "$(group)"),
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/$(internal_cert_file)",
                             "$(sys.policy_hub)"),
      comment => "Copy openfire-to-LDAP certificate file",
      classes => if_repaired("internal_cert");

      # Copy the openfire-to-LDAP key file from the policy host
      "$(internal_key_path)"
      perms => mog("600", "$(user)", "$(group)"),
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/$(internal_key_file)",
                             "$(sys.policy_hub)"),
      comment => "Copy openfire-to-LDAP key file",
      classes => if_repaired("internal_key");

      # Copy the server certificate file from the policy host
      "$(external_cert_path)"
      perms => mog("644", "$(user)", "$(group)"),
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/$(external_cert_file)",
                             "$(sys.policy_hub)"),
      comment => "Copy openfire-to-LDAP certificate file",
      classes => if_repaired("external_cert");

      # Copy the server key file from the policy host
      "$(external_key_path)"
      perms => mog("600", "$(user)", "$(group)"),
      copy_from => secure_cp("$(base_config.file_store)/$(sys.uqhost)/$(external_key_file)",
                             "$(sys.policy_hub)"),
      comment => "Copy openfire-to-LDAP key file",
      classes => if_repaired("external_key");

      # Set configuation variables
      "$(login_conf_path)"
      create => "true",
      perms => mog("644", "$(user)", "$(group)"),
      edit_template => "$(sys.workdir)/inputs/promises/openfire-login.conf.template",
      comment => "Set JAAS login.conf variables",
      classes => if_repaired("set_login_conf_vars");

      # Set admin console configuation variables
      "$(openfire_config_path)"
      create => "true",
      perms => mog("644", "$(user)", "$(group)"),
      edit_template => "$(sys.workdir)/inputs/promises/openfire.xml.template",
      comment => "Set openfire admin console variables",
      classes => if_repaired("set_base_config_vars");

    freebsd::
      # Make sure openfire is enabled
      "/etc/rc.conf"
      create => "true",
      perms => mog("644", "root", "wheel"),
      edit_line => set_variable_values("openfire.rc_conf"),
      comment => "Enable openfire in rc.conf",
      classes => if_repaired("enable_openfire_rc_conf");

      # Set java arguments to openfire
      "/etc/rc.conf"
      create => "true",
      perms => mog("644", "root", "wheel"),
      edit_line => append_if_no_line("$(openfire_javargs)"),
      comment => "Enable openfire in rc.conf",
      classes => if_repaired("enable_openfire_rc_conf");

      # By default, openfire installs a postgresql driver that doesn't
      # support GSSAPI.  We need to replace it with one that does.
      "$(openfire_postgres_jar)"
      create => "true",
      perms => mog("644", "$(user)", "$(group)"),
      copy_from => local_cp("$(port_postgres_jar)"),
      comment => "Install PostgreSQL JDBC driver",
      classes => if_repaired("postgresql_jdbc_driver");

  reports:
    keytab_wrong_perms::
      "Set permissions on $(keytab_path).  WARNING: Keytab had wrong permissions; possible data breach!";

    keystore::
      "Copied openfire keystore to $(keystore_path)";

    truststore::
      "Copied Java truststore $(java_cacerts_path) to $(truststore_path)";

    client_truststore::
      "Copied CA truststore $(ca_cert.ca_keystore_path) to $(client_truststore_path)";

    internal_key::
      "Copied openfire-to-LDAP SSL key";

    internal_cert::
      "Copied openfire-to-LDAP SSL certificate";

    external_key::
      "Copied openfire server SSL key";

    external_cert::
      "Copied openfire server SSL certificate";

    create_conf_dir::
      "Created openfire configuration directory";

    enable_openfire_rc_conf::
      "Enabled openfire in rc.conf";

    set_login_conf_vars::
      "Set JAAS configuration variables in $(login_conf_path)";

    set_base_config_vars::
      "Set openfire base configuration variables in $(openfire_config_path)";

    postgresql_jdbc_driver::
      "Installed PostgreSQL JDBC driver";
}
