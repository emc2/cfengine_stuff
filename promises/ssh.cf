# Basic configuration data for SSH
bundle agent ssh_config
{
  vars:
      "ciphers" string => "aes256-gcm@openssh.com,aes256-ctr,aes256-cbc,aes192-ctr,aes192-cbc,aes128-gcm@openssh.com,aes128-ctr,aes128-cbc,blowfish-cbc";
      "macs" string => "hmac-sha2-512-etm@openssh.com,hmac-sha2-512,hmac-sha2-256-etm@openssh.com,hmac-sha2-256,hmac-ripemd160-etm@openssh.com,hmac-ripemd160";
      "kex" string => "diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1";
      "hostkey" string => "ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,ssh-rsa-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-rsa";

    freebsd::
      "ssh_config_dir" string => "/etc/ssh";
}

# Bundle to manage the SSH configuration.  This sets configuration
# parameters for ssh and sshd.
bundle agent ssh_client
{
  vars:
      # SSH configuration file
      "ssh_config_file" string => "ssh_config";
      # Path to SSH configuration file
      "ssh_config_path" string => "$(ssh_config.ssh_config_dir)/$(ssh_config_file)";

    freebsd::
      # There is another SSH configuration file in /usr/local, if
      # anyone's installed any ssh ports (most commonly,
      # openssh-portable)
      "usr_local_ssh_config_path" string => "/usr/local$(ssh_config_path)";

  files:
      # Set variables in the client SSH configuration file
      "$(ssh_config_path)"
      create => "true",
      perms => m("644"),
      edit_template => "$(sys.workdir)/inputs/promises/ssh_config.template",
      comment => "Set variables in Host * section in ssh_config",
      classes => if_repaired("ssh_config_edit");

    freebsd::
      # Set variables in the client SSH configuration file in /usr/local.  Don't symlink this, but rather set all the variables.  This is in case someone's put 
      "$(usr_local_ssh_config_path)"
      create => "true",
      perms => m("644"),
      edit_template => "$(sys.workdir)/inputs/promises/ssh_config.template",
      comment => "Set variables in Host * section in ssh_config",
      classes => if_repaired("usr_local_ssh_config_edit");

  reports:
    ssh_config_edit::
      "Set variables in Host * section in $(ssh_config_path)";

    usr_local_ssh_config_edit::
      "Set variables in Host * section in $(usr_local_ssh_config_path)";
}

bundle agent ssh_server
{
  vars:
      # Configuration file for sshd
      "sshd_config_file" string => "sshd_config";
      # Path to sshd configuration file
      "sshd_config_path" string => "$(ssh_config.ssh_config_dir)/$(sshd_config_file)";

    freebsd::
      # There is another SSH configuration file in /usr/local, if
      # anyone's installed any ssh ports (most commonly,
      # openssh-portable)
      "usr_local_sshd_config_path" string => "/usr/local$(sshd_config_path)";

      "rc_conf[sshd_enable]" string => "YES";

 files:
      # Set variables in the client SSH configuration file
      "$(sshd_config_path)"
      create => "true",
      perms => m("644"),
      edit_template => "$(sys.workdir)/inputs/promises/sshd_config.template",
      comment => "Set variables in sshd_config",
      classes => if_repaired("sshd_config_edit");

    freebsd::
      # Set variables in the client SSH configuration file in /usr/local.  Don't symlink this, but rather set all the variables.  This is in case someone's put 
      "$(usr_local_ssh_config_path)"
      create => "true",
      perms => m("644"),
      edit_template => "$(sys.workdir)/inputs/promises/sshd_config.template",
      comment => "Set variables in sshd_config",
      classes => if_repaired("usr_local_sshd_config_edit");

      # Make sure the sshd server is turned on
      "/etc/rc.conf"
      create => "true",
      perms => mog("644", "root", "wheel"),
      edit_line => set_variable_values("ssh_server.rc_conf"),
      comment => "Enable nslcd in rc.conf",
      classes => if_repaired("enable_sshd_rc_conf");

  reports:
    sshd_config_edit::
      "Set variables in Host * section in $(sshd_config_path)";

    usr_local_sshd_config_edit::
      "Set variables in Host * section in $(usr_local_sshd_config_path)";

    enable_sshd_rc_conf::
      "Enabled sshd in rc.conf";

}

# Bundle to ensure that the sshd server is NOT enabled
bundle agent no_ssh_server
{
  vars:
    freebsd::
      "rc_conf[sshd_enable]" string => "NO";

  files:
    freebsd::
      # Make sure the sshd server is turned on
      "/etc/rc.conf"
      create => "true",
      perms => mog("644", "root", "wheel"),
      edit_line => set_variable_values("ssh_server.rc_conf"),
      comment => "Disable nslcd in rc.conf",
      classes => if_repaired("disable_sshd_rc_conf");

  reports:
    disable_sshd_rc_conf::
      "Disabled sshd in rc.conf";
}
